//Y29uc3QgeyBjcmVhdGUsIENsaWVudCB9ID0gcmVxdWlyZSgnQG9wZW4td2Evd2EtYXV0b21hdGUnKQpjb25zdCBmaWdsZXQgPSByZXF1aXJlKCdmaWdsZXQnKQpjb25zdCBvcHRpb25zID0gcmVxdWlyZSgnLi91dGlscy9vcHRpb25zJykKY29uc3QgeyBjb2xvciwgbWVzc2FnZUxvZyB9ID0gcmVxdWlyZSgnLi91dGlscycpCmNvbnN0IEhhbmRsZU1zZyA9IHJlcXVpcmUoJy4vSGFuZGxlTXNnJykKCmNvbnN0IHN0YXJ0ID0gKGFydWdhID0gbmV3IENsaWVudCgpKSA9PiB7CiAgICBjb25zb2xlLmxvZyhjb2xvcihmaWdsZXQudGV4dFN5bmMoJy0tLS0tLS0tLS0tLS0tLS0nLCB7IGhvcml6b250YWxMYXlvdXQ6ICdkZWZhdWx0JyB9KSkpCiAgICBjb25zb2xlLmxvZyhjb2xvcihmaWdsZXQudGV4dFN5bmMoJ0FSVUdBIEJPVCcsIHsgZm9udDogJ0dob3N0JywgaG9yaXpvbnRhbExheW91dDogJ2RlZmF1bHQnIH0pKSkKICAgIGNvbnNvbGUubG9nKGNvbG9yKGZpZ2xldC50ZXh0U3luYygnLS0tLS0tLS0tLS0tLS0tLScsIHsgaG9yaXpvbnRhbExheW91dDogJ2RlZmF1bHQnIH0pKSkKICAgIGNvbnNvbGUubG9nKGNvbG9yKCdbREVWXScpLCBjb2xvcignQXJ1Z2FaJywgJ3llbGxvdycpKQogICAgY29uc29sZS5sb2coY29sb3IoJ1t+Pj5dJyksIGNvbG9yKCdCT1QgU3RhcnRlZCEnLCAnZ3JlZW4nKSkKCiAgICAvLyBNZW1wZXJ0YWhhbmthbiBzZXNpIGFnYXIgdGV0YXAgbnlhbGEKICAgIGFydWdhLm9uU3RhdGVDaGFuZ2VkKChzdGF0ZSkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKGNvbG9yKCdbfj4+XScsICdyZWQnKSwgc3RhdGUpCiAgICAgICAgaWYgKHN0YXRlID09PSAnQ09ORkxJQ1QnIHx8IHN0YXRlID09PSAnVU5MQVVOQ0hFRCcpIGFydWdhLmZvcmNlUmVmb2N1cygpCiAgICB9KQoKICAgIC8vIGtldGlrYSBib3QgZGlpbnZpdGUga2UgZGFsYW0gZ3JvdXAKICAgIGFydWdhLm9uQWRkZWRUb0dyb3VwKGFzeW5jIChjaGF0KSA9PiB7Cgljb25zdCBncm91cHMgPSBhd2FpdCBhcnVnYS5nZXRBbGxHcm91cHMoKQoJLy8ga29uZGlzaSBrZXRpa2EgYmF0YXMgZ3JvdXAgYm90IHRlbGFoIHRlcmNhcGFpLHViYWggZGkgZmlsZSBzZXR0aW5ncy9zZXR0aW5nLmpzb24KCWlmIChncm91cHMubGVuZ3RoID4gZ3JvdXBMaW1pdCkgewoJYXdhaXQgYXJ1Z2Euc2VuZFRleHQoY2hhdC5pZCwgYFNvcnJ5LCB0aGUgZ3JvdXAgb24gdGhpcyBCb3QgaXMgZnVsbFxuTWF4IEdyb3VwIGlzOiAke2dyb3VwTGltaXR9YCkudGhlbigoKSA9PiB7CgkgICAgICBhcnVnYS5sZWF2ZUdyb3VwKGNoYXQuaWQpCgkgICAgICBhcnVnYS5kZWxldGVDaGF0KGNoYXQuaWQpCgkgIH0pIAoJfSBlbHNlIHsKCS8vIGtvbmRpc2kga2V0aWthIGJhdGFzIG1lbWJlciBncm91cCBiZWx1bSB0ZXJjYXBhaSwgdWJhaCBkaSBmaWxlIHNldHRpbmdzL3NldHRpbmcuanNvbgoJICAgIGlmIChjaGF0Lmdyb3VwTWV0YWRhdGEucGFydGljaXBhbnRzLmxlbmd0aCA8IG1lbWJlckxpbWl0KSB7CgkgICAgYXdhaXQgYXJ1Z2Euc2VuZFRleHQoY2hhdC5pZCwgYFNvcnJ5LCBCb3QgY29tZXMgb3V0IGlmIHRoZSBncm91cCBtZW1iZXJzIGRvIG5vdCBleGNlZWQgJHttZW1iZXJMaW1pdH0gcGVvcGxlYCkudGhlbigoKSA9PiB7CgkgICAgICBhcnVnYS5sZWF2ZUdyb3VwKGNoYXQuaWQpCgkgICAgICBhcnVnYS5kZWxldGVDaGF0KGNoYXQuaWQpCgkgICAgfSkKCSAgICB9IGVsc2UgewogICAgICAgIGF3YWl0IGFydWdhLnNpbXVsYXRlVHlwaW5nKGNoYXQuaWQsIHRydWUpLnRoZW4oYXN5bmMgKCkgPT4gewogICAgICAgICAgYXdhaXQgYXJ1Z2Euc2VuZFRleHQoY2hhdC5pZCwgYEhhaSBtaW5uYX4sIEltIEFydWdhIEJvdC4gVG8gZmluZCBvdXQgdGhlIGNvbW1hbmRzIG9uIHRoaXMgYm90IHR5cGUgJHtwcmVmaXh9bWVudWApCiAgICAgICAgfSkKCSAgICB9Cgl9CiAgICB9KQoKICAgIC8vIGtldGlrYSBzZXNlb3JhbmcgbWFzdWsva2VsdWFyIGRhcmkgZ3JvdXAKICAgIGFydWdhLm9uR2xvYmFsUGFyaWNpcGFudHNDaGFuZ2VkKGFzeW5jIChldmVudCkgPT4gewogICAgICAgIGNvbnN0IGhvc3QgPSBhd2FpdCBhcnVnYS5nZXRIb3N0TnVtYmVyKCkgKyAnQGMudXMnCgkJY29uc3Qgd2VsY29tZSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCcuL3NldHRpbmdzL3dlbGNvbWUuanNvbicpKQoJCWNvbnN0IGlzV2VsY29tZSA9IHdlbGNvbWUuaW5jbHVkZXMoZXZlbnQuY2hhdCkKCQlsZXQgcHJvZmlsZSA9IGF3YWl0IGFydWdhLmdldFByb2ZpbGVQaWNGcm9tU2VydmVyKGV2ZW50LndobykKCQlpZiAocHJvZmlsZSA9PSAnJyB8fCBwcm9maWxlID09IHVuZGVmaW5lZCkgcHJvZmlsZSA9ICdodHRwczovL2VuY3J5cHRlZC10Ym4wLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibiUzQUFOZDlHY1RRY09Eams3QWNBNHdiXzlPTHpvZUFkcEd3bWtKcU9ZeEVCQSZ1c3FwPUNBVScKICAgICAgICAvLyBrb25kaXNpIGtldGlrYSBzZXNlb3JhbmcgZGlpbnZpdGUvam9pbiBncm91cCBsZXdhdCBsaW5rCiAgICAgICAgaWYgKGV2ZW50LmFjdGlvbiA9PT0gJ2FkZCcgJiYgZXZlbnQud2hvICE9PSBob3N0ICYmIGlzV2VsY29tZSkgewoJCQlhd2FpdCBhcnVnYS5zZW5kRmlsZUZyb21VcmwoZXZlbnQuY2hhdCwgcHJvZmlsZSwgJ3Byb2ZpbGUuanBnJywgJycpCiAgICAgICAgICAgIGF3YWl0IGFydWdhLnNlbmRUZXh0V2l0aE1lbnRpb25zKGV2ZW50LmNoYXQsIGBIZWxsbywgV2VsY29tZSB0byB0aGUgZ3JvdXAgQCR7ZXZlbnQud2hvLnJlcGxhY2UoJ0BjLnVzJywgJycpfSBcblxuSGF2ZSBmdW4gd2l0aCB1c+KcqGApCiAgICAgICAgfQogICAgICAgIC8vIGtvbmRpc2kga2V0aWthIHNlc2VvcmFuZyBkaWtpY2sva2VsdWFyIGRhcmkgZ3JvdXAKICAgICAgICBpZiAoZXZlbnQuYWN0aW9uID09PSAncmVtb3ZlJyAmJiBldmVudC53aG8gIT09IGhvc3QpIHsKCQkJYXdhaXQgYXJ1Z2Euc2VuZEZpbGVGcm9tVXJsKGV2ZW50LmNoYXQsIHByb2ZpbGUsICdwcm9maWxlLmpwZycsICcnKQogICAgICAgICAgICBhd2FpdCBhcnVnYS5zZW5kVGV4dFdpdGhNZW50aW9ucyhldmVudC5jaGF0LCBgR29vZCBieWUgQCR7ZXZlbnQud2hvLnJlcGxhY2UoJ0BjLnVzJywgJycpfSwgV2UnbGwgbWlzcyB5b3XinKhgKQogICAgICAgIH0KICAgIH0pCgogICAgYXJ1Z2Eub25JbmNvbWluZ0NhbGwoYXN5bmMgKGNhbGxEYXRhKSA9PiB7CiAgICAgICAgLy8ga2V0aWthIHNlc2VvcmFuZyBtZW5lbHBvbiBub21vciBib3QgYWthbiBtZW5naXJpbSBwZXNhbgogICAgICAgIGF3YWl0IGFydWdhLnNlbmRUZXh0KGNhbGxEYXRhLnBlZXJKaWQsICdNYWFmIHNlZGFuZyB0aWRhayBiaXNhIG1lbmVyaW1hIHBhbmdnaWxhbi5cblxuLWJvdCcpCiAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4gewogICAgICAgICAgICAvLyBib3QgYWthbiBtZW1ibG9jayBub21vciBpdHUKICAgICAgICAgICAgYXdhaXQgYXJ1Z2EuY29udGFjdEJsb2NrKGNhbGxEYXRhLnBlZXJKaWQpCiAgICAgICAgfSkKICAgIH0pCgogICAgLy8ga2V0aWthIHNlc2VvcmFuZyBtZW5naXJpbSBwZXNhbgogICAgYXJ1Z2Eub25NZXNzYWdlKGFzeW5jIChtZXNzYWdlKSA9PiB7CiAgICAgICAgYXJ1Z2EuZ2V0QW1vdW50T2ZMb2FkZWRNZXNzYWdlcygpIC8vIG1lbmdoYXB1cyBwZXNhbiBjYWNoZSBqaWthIHN1ZGFoIDMwMDAgcGVzYW4uCiAgICAgICAgICAgIC50aGVuKChtc2cpID0+IHsKICAgICAgICAgICAgICAgIGlmIChtc2cgPj0gMzAwMCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbYXJ1Z2FdJywgY29sb3IoYExvYWRlZCBNZXNzYWdlIFJlYWNoICR7bXNnfSwgY3V0aW5nIG1lc3NhZ2UgY2FjaGUuLi5gLCAneWVsbG93JykpCiAgICAgICAgICAgICAgICAgICAgYXJ1Z2EuY3V0TXNnQ2FjaGUoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgIEhhbmRsZU1zZyhhcnVnYSwgbWVzc2FnZSkgICAgCiAgICAKICAgIH0pCgkKICAgIC8vIE1lc3NhZ2UgbG9nIGZvciBhbmFseXRpYwogICAgYXJ1Z2Eub25BbnlNZXNzYWdlKChhbmFsKSA9PiB7IAogICAgICAgIG1lc3NhZ2VMb2coYW5hbC5mcm9tTWUsIGFuYWwudHlwZSkKICAgIH0pCn0KCi8vY3JlYXRlIHNlc3Npb24KY3JlYXRlKG9wdGlvbnModHJ1ZSwgc3RhcnQpKQogICAgLnRoZW4oKGFydWdhKSA9PiBzdGFydChhcnVnYSkpCiAgICAuY2F0Y2goKGVycikgPT4gbmV3IEVycm9yKGVycikp
